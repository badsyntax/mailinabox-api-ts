/* tslint:disable */
/* eslint-disable */
/**
 * Mail-in-a-Box
 * Mail-in-a-Box API HTTP specification.
 *
 * The version of the OpenAPI document: 0.46.0
 * Contact: contact@mailinabox.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  DNSCustomRecordsResponse,
  DNSCustomRecordsResponseFromJSON,
  DNSCustomRecordsResponseToJSON,
  DNSDumpResponse,
  DNSDumpResponseFromJSON,
  DNSDumpResponseToJSON,
  DNSRecordType,
  DNSRecordTypeFromJSON,
  DNSRecordTypeToJSON,
  DNSSecondaryNameserverResponse,
  DNSSecondaryNameserverResponseFromJSON,
  DNSSecondaryNameserverResponseToJSON,
  DNSZonesResponse,
  DNSZonesResponseFromJSON,
  DNSZonesResponseToJSON,
} from '../models';

export interface AddDnsCustomRecordRequest {
  domain: string;
  type: DNSRecordType;
  body: string;
}

export interface AddDnsCustomRecordForTypeARequest {
  domain: string;
  body: string;
}

export interface AddDnsSecondaryNameserverRequest {
  hostnames: string;
}

export interface GetDnsCustomRecordsForDomainAndTypeRequest {
  domain: string;
  type: DNSRecordType;
}

export interface GetDnsCustomRecordsForDomainAndTypeARequest {
  domain: string;
}

export interface RemoveDnsCustomRecordRequest {
  domain: string;
  type: DNSRecordType;
  body: string;
}

export interface RemoveDnsCustomRecordForTypeARequest {
  domain: string;
  body: string;
}

export interface UpdateDnsRequest {
  force: number;
}

export interface UpdateDnsCustomRecordRequest {
  domain: string;
  type: DNSRecordType;
  body: string;
}

export interface UpdateDnsCustomRecordForTypeARequest {
  domain: string;
  body: string;
}

/**
 *
 */
export class DNSApi extends runtime.BaseAPI {
  /**
   * Add a custom DNS record.
   */
  async addDnsCustomRecordRaw(
    requestParameters: AddDnsCustomRecordRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling addDnsCustomRecord.'
      );
    }

    if (
      requestParameters.type === null ||
      requestParameters.type === undefined
    ) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter requestParameters.type was null or undefined when calling addDnsCustomRecord.'
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling addDnsCustomRecord.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'text/plain';

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}/{type}`
        .replace(
          `{${'domain'}}`,
          encodeURIComponent(String(requestParameters.domain))
        )
        .replace(
          `{${'type'}}`,
          encodeURIComponent(String(requestParameters.type))
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Add a custom DNS record.
   */
  async addDnsCustomRecord(
    requestParameters: AddDnsCustomRecordRequest
  ): Promise<string> {
    const response = await this.addDnsCustomRecordRaw(requestParameters);
    return await response.value();
  }

  /**
   * Add a custom DNS A record.
   */
  async addDnsCustomRecordForTypeARaw(
    requestParameters: AddDnsCustomRecordForTypeARequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling addDnsCustomRecordForTypeA.'
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling addDnsCustomRecordForTypeA.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'text/plain';

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}`.replace(
        `{${'domain'}}`,
        encodeURIComponent(String(requestParameters.domain))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Add a custom DNS A record.
   */
  async addDnsCustomRecordForTypeA(
    requestParameters: AddDnsCustomRecordForTypeARequest
  ): Promise<string> {
    const response = await this.addDnsCustomRecordForTypeARaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * Add secondary nameservers.
   */
  async addDnsSecondaryNameserverRaw(
    requestParameters: AddDnsSecondaryNameserverRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.hostnames === null ||
      requestParameters.hostnames === undefined
    ) {
      throw new runtime.RequiredError(
        'hostnames',
        'Required parameter requestParameters.hostnames was null or undefined when calling addDnsSecondaryNameserver.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.hostnames !== undefined) {
      formParams.append('hostnames', requestParameters.hostnames as any);
    }

    const response = await this.request({
      path: `/dns/secondary-nameserver`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: formParams,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Add secondary nameservers.
   */
  async addDnsSecondaryNameserver(
    requestParameters: AddDnsSecondaryNameserverRequest
  ): Promise<string> {
    const response = await this.addDnsSecondaryNameserverRaw(requestParameters);
    return await response.value();
  }

  /**
   * Retrieve all custom DNS records.
   */
  async getDnsCustomRecordsRaw(): Promise<
    runtime.ApiResponse<DNSCustomRecordsResponse>
  > {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DNSCustomRecordsResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve all custom DNS records.
   */
  async getDnsCustomRecords(): Promise<DNSCustomRecordsResponse> {
    const response = await this.getDnsCustomRecordsRaw();
    return await response.value();
  }

  /**
   * Get DNS records for domain and type.
   */
  async getDnsCustomRecordsForDomainAndTypeRaw(
    requestParameters: GetDnsCustomRecordsForDomainAndTypeRequest
  ): Promise<runtime.ApiResponse<DNSCustomRecordsResponse>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling getDnsCustomRecordsForDomainAndType.'
      );
    }

    if (
      requestParameters.type === null ||
      requestParameters.type === undefined
    ) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter requestParameters.type was null or undefined when calling getDnsCustomRecordsForDomainAndType.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}/{type}`
        .replace(
          `{${'domain'}}`,
          encodeURIComponent(String(requestParameters.domain))
        )
        .replace(
          `{${'type'}}`,
          encodeURIComponent(String(requestParameters.type))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DNSCustomRecordsResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get DNS records for domain and type.
   */
  async getDnsCustomRecordsForDomainAndType(
    requestParameters: GetDnsCustomRecordsForDomainAndTypeRequest
  ): Promise<DNSCustomRecordsResponse> {
    const response = await this.getDnsCustomRecordsForDomainAndTypeRaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * Get DNS A records for domain.
   */
  async getDnsCustomRecordsForDomainAndTypeARaw(
    requestParameters: GetDnsCustomRecordsForDomainAndTypeARequest
  ): Promise<runtime.ApiResponse<DNSCustomRecordsResponse>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling getDnsCustomRecordsForDomainAndTypeA.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}`.replace(
        `{${'domain'}}`,
        encodeURIComponent(String(requestParameters.domain))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DNSCustomRecordsResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get DNS A records for domain.
   */
  async getDnsCustomRecordsForDomainAndTypeA(
    requestParameters: GetDnsCustomRecordsForDomainAndTypeARequest
  ): Promise<DNSCustomRecordsResponse> {
    const response = await this.getDnsCustomRecordsForDomainAndTypeARaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * Retrieve all DNS records.
   */
  async getDnsDumpRaw(): Promise<runtime.ApiResponse<DNSDumpResponse>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/dump`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DNSDumpResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve all DNS records.
   */
  async getDnsDump(): Promise<DNSDumpResponse> {
    const response = await this.getDnsDumpRaw();
    return await response.value();
  }

  /**
   * Retrieve secondary nameservers.
   */
  async getDnsSecondaryNameserverRaw(): Promise<
    runtime.ApiResponse<DNSSecondaryNameserverResponse>
  > {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/secondary-nameserver`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DNSSecondaryNameserverResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve secondary nameservers.
   */
  async getDnsSecondaryNameserver(): Promise<DNSSecondaryNameserverResponse> {
    const response = await this.getDnsSecondaryNameserverRaw();
    return await response.value();
  }

  /**
   * Retrieve DNS zones.
   */
  async getDnsZonesRaw(): Promise<runtime.ApiResponse<DNSZonesResponse>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/zones`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DNSZonesResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve DNS zones.
   */
  async getDnsZones(): Promise<DNSZonesResponse> {
    const response = await this.getDnsZonesRaw();
    return await response.value();
  }

  /**
   * Remove a custom DNS record.
   */
  async removeDnsCustomRecordRaw(
    requestParameters: RemoveDnsCustomRecordRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling removeDnsCustomRecord.'
      );
    }

    if (
      requestParameters.type === null ||
      requestParameters.type === undefined
    ) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter requestParameters.type was null or undefined when calling removeDnsCustomRecord.'
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling removeDnsCustomRecord.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'text/plain';

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}/{type}`
        .replace(
          `{${'domain'}}`,
          encodeURIComponent(String(requestParameters.domain))
        )
        .replace(
          `{${'type'}}`,
          encodeURIComponent(String(requestParameters.type))
        ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Remove a custom DNS record.
   */
  async removeDnsCustomRecord(
    requestParameters: RemoveDnsCustomRecordRequest
  ): Promise<string> {
    const response = await this.removeDnsCustomRecordRaw(requestParameters);
    return await response.value();
  }

  /**
   * Remove a custom DNS A record.
   */
  async removeDnsCustomRecordForTypeARaw(
    requestParameters: RemoveDnsCustomRecordForTypeARequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling removeDnsCustomRecordForTypeA.'
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling removeDnsCustomRecordForTypeA.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'text/plain';

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}`.replace(
        `{${'domain'}}`,
        encodeURIComponent(String(requestParameters.domain))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Remove a custom DNS A record.
   */
  async removeDnsCustomRecordForTypeA(
    requestParameters: RemoveDnsCustomRecordForTypeARequest
  ): Promise<string> {
    const response = await this.removeDnsCustomRecordForTypeARaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * Update DNS, which involves creating zone files and restarting `nsd`.
   */
  async updateDnsRaw(
    requestParameters: UpdateDnsRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.force === null ||
      requestParameters.force === undefined
    ) {
      throw new runtime.RequiredError(
        'force',
        'Required parameter requestParameters.force was null or undefined when calling updateDns.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.force !== undefined) {
      formParams.append('force', requestParameters.force as any);
    }

    const response = await this.request({
      path: `/dns/update`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: formParams,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update DNS, which involves creating zone files and restarting `nsd`.
   */
  async updateDns(requestParameters: UpdateDnsRequest): Promise<string> {
    const response = await this.updateDnsRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update a custom DNS record.
   */
  async updateDnsCustomRecordRaw(
    requestParameters: UpdateDnsCustomRecordRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateDnsCustomRecord.'
      );
    }

    if (
      requestParameters.type === null ||
      requestParameters.type === undefined
    ) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter requestParameters.type was null or undefined when calling updateDnsCustomRecord.'
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling updateDnsCustomRecord.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'text/plain';

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}/{type}`
        .replace(
          `{${'domain'}}`,
          encodeURIComponent(String(requestParameters.domain))
        )
        .replace(
          `{${'type'}}`,
          encodeURIComponent(String(requestParameters.type))
        ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update a custom DNS record.
   */
  async updateDnsCustomRecord(
    requestParameters: UpdateDnsCustomRecordRequest
  ): Promise<string> {
    const response = await this.updateDnsCustomRecordRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update a custom DNS A record.
   */
  async updateDnsCustomRecordForTypeARaw(
    requestParameters: UpdateDnsCustomRecordForTypeARequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.domain === null ||
      requestParameters.domain === undefined
    ) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateDnsCustomRecordForTypeA.'
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling updateDnsCustomRecordForTypeA.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'text/plain';

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/dns/custom/{domain}`.replace(
        `{${'domain'}}`,
        encodeURIComponent(String(requestParameters.domain))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update a custom DNS A record.
   */
  async updateDnsCustomRecordForTypeA(
    requestParameters: UpdateDnsCustomRecordForTypeARequest
  ): Promise<string> {
    const response = await this.updateDnsCustomRecordForTypeARaw(
      requestParameters
    );
    return await response.value();
  }
}
