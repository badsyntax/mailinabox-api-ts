/* tslint:disable */
/* eslint-disable */
/**
 * Mail-in-a-Box
 * Mail-in-a-Box API HTTP specification.
 *
 * The version of the OpenAPI document: 0.46.0
 * Contact: contact@mailinabox.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { WebDomain, WebDomainFromJSON, WebDomainToJSON } from '../models';

/**
 *
 */
export class WebApi extends runtime.BaseAPI {
  /**
   * Retrieve all static web domains.
   */
  async getWebDomainsRaw(): Promise<runtime.ApiResponse<Array<WebDomain>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/web/domains`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(WebDomainFromJSON)
    );
  }

  /**
   * Retrieve all static web domains.
   */
  async getWebDomains(): Promise<Array<WebDomain>> {
    const response = await this.getWebDomainsRaw();
    return await response.value();
  }

  /**
   * Update static websites, used for updating domain root directories.
   */
  async updateWebRaw(): Promise<runtime.ApiResponse<string>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/web/update`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update static websites, used for updating domain root directories.
   */
  async updateWeb(): Promise<string> {
    const response = await this.updateWebRaw();
    return await response.value();
  }
}
