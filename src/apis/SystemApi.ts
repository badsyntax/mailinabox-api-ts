/* tslint:disable */
/* eslint-disable */
/**
 * Mail-in-a-Box
 * Mail-in-a-Box API HTTP specification.
 *
 * The version of the OpenAPI document: 0.46.0
 * Contact: contact@mailinabox.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  SystemBackupConfigResponse,
  SystemBackupConfigResponseFromJSON,
  SystemBackupConfigResponseToJSON,
  SystemBackupStatusResponse,
  SystemBackupStatusResponseFromJSON,
  SystemBackupStatusResponseToJSON,
  SystemPrivacyStatus,
  SystemPrivacyStatusFromJSON,
  SystemPrivacyStatusToJSON,
  SystemStatusResponse,
  SystemStatusResponseFromJSON,
  SystemStatusResponseToJSON,
} from '../models';

export interface UpdateSystemBackupConfigRequest {
  target: string;
  targetUser: string;
  targetPass: string;
  minAge: number;
}

export interface UpdateSystemPrivacyRequest {
  value: SystemPrivacyStatus;
}

/**
 *
 */
export class SystemApi extends runtime.BaseAPI {
  /**
   * Retrieve backup config.
   */
  async getSystemBackupConfigRaw(): Promise<
    runtime.ApiResponse<SystemBackupConfigResponse>
  > {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/backup/config`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SystemBackupConfigResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve backup config.
   */
  async getSystemBackupConfig(): Promise<SystemBackupConfigResponse> {
    const response = await this.getSystemBackupConfigRaw();
    return await response.value();
  }

  /**
   * Retrieve backup status.  If the list of backups is empty, this implies no backups have been made yet.
   */
  async getSystemBackupStatusRaw(): Promise<
    runtime.ApiResponse<SystemBackupStatusResponse>
  > {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/backup/status`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SystemBackupStatusResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve backup status.  If the list of backups is empty, this implies no backups have been made yet.
   */
  async getSystemBackupStatus(): Promise<SystemBackupStatusResponse> {
    const response = await this.getSystemBackupStatusRaw();
    return await response.value();
  }

  /**
   * Retrieve new-version check status.  Response:    - `true`: Private, new-version checks will not be performed   - `false`: Not private, new-version checks will be performed
   */
  async getSystemPrivacyStatusRaw(): Promise<runtime.ApiResponse<boolean>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/privacy`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Retrieve new-version check status.  Response:    - `true`: Private, new-version checks will not be performed   - `false`: Not private, new-version checks will be performed
   */
  async getSystemPrivacyStatus(): Promise<boolean> {
    const response = await this.getSystemPrivacyStatusRaw();
    return await response.value();
  }

  /**
   * Retrieve reboot status.  Response:    - `true`: A reboot is required   - `false`: A reboot is not required
   */
  async getSystemRebootStatusRaw(): Promise<runtime.ApiResponse<boolean>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/reboot`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Retrieve reboot status.  Response:    - `true`: A reboot is required   - `false`: A reboot is not required
   */
  async getSystemRebootStatus(): Promise<boolean> {
    const response = await this.getSystemRebootStatusRaw();
    return await response.value();
  }

  /**
   * Retrieve system status. Returns an array of statuses which can include headings.
   */
  async getSystemStatusRaw(): Promise<
    runtime.ApiResponse<SystemStatusResponse>
  > {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/status`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SystemStatusResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve system status. Returns an array of statuses which can include headings.
   */
  async getSystemStatus(): Promise<SystemStatusResponse> {
    const response = await this.getSystemStatusRaw();
    return await response.value();
  }

  /**
   * Retrieve system updates.
   */
  async getSystemUpdatesRaw(): Promise<runtime.ApiResponse<string>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/updates`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Retrieve system updates.
   */
  async getSystemUpdates(): Promise<string> {
    const response = await this.getSystemUpdatesRaw();
    return await response.value();
  }

  /**
   * Retrieve Mail-in-a-Box upstream version.
   */
  async getSystemUpstreamVersionRaw(): Promise<runtime.ApiResponse<string>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/latest-upstream-version`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Retrieve Mail-in-a-Box upstream version.
   */
  async getSystemUpstreamVersion(): Promise<string> {
    const response = await this.getSystemUpstreamVersionRaw();
    return await response.value();
  }

  /**
   * Retrieve installed Mail-in-a-Box version.
   */
  async getSystemVersionRaw(): Promise<runtime.ApiResponse<string>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/version`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Retrieve installed Mail-in-a-Box version.
   */
  async getSystemVersion(): Promise<string> {
    const response = await this.getSystemVersionRaw();
    return await response.value();
  }

  /**
   * Reboot system.
   */
  async rebootSystemRaw(): Promise<runtime.ApiResponse<string>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/reboot`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Reboot system.
   */
  async rebootSystem(): Promise<string> {
    const response = await this.rebootSystemRaw();
    return await response.value();
  }

  /**
   * Update backup config.
   */
  async updateSystemBackupConfigRaw(
    requestParameters: UpdateSystemBackupConfigRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.target === null ||
      requestParameters.target === undefined
    ) {
      throw new runtime.RequiredError(
        'target',
        'Required parameter requestParameters.target was null or undefined when calling updateSystemBackupConfig.'
      );
    }

    if (
      requestParameters.targetUser === null ||
      requestParameters.targetUser === undefined
    ) {
      throw new runtime.RequiredError(
        'targetUser',
        'Required parameter requestParameters.targetUser was null or undefined when calling updateSystemBackupConfig.'
      );
    }

    if (
      requestParameters.targetPass === null ||
      requestParameters.targetPass === undefined
    ) {
      throw new runtime.RequiredError(
        'targetPass',
        'Required parameter requestParameters.targetPass was null or undefined when calling updateSystemBackupConfig.'
      );
    }

    if (
      requestParameters.minAge === null ||
      requestParameters.minAge === undefined
    ) {
      throw new runtime.RequiredError(
        'minAge',
        'Required parameter requestParameters.minAge was null or undefined when calling updateSystemBackupConfig.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.target !== undefined) {
      formParams.append('target', requestParameters.target as any);
    }

    if (requestParameters.targetUser !== undefined) {
      formParams.append('target_user', requestParameters.targetUser as any);
    }

    if (requestParameters.targetPass !== undefined) {
      formParams.append('target_pass', requestParameters.targetPass as any);
    }

    if (requestParameters.minAge !== undefined) {
      formParams.append('min_age', requestParameters.minAge as any);
    }

    const response = await this.request({
      path: `/system/backup/config`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: formParams,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update backup config.
   */
  async updateSystemBackupConfig(
    requestParameters: UpdateSystemBackupConfigRequest
  ): Promise<string> {
    const response = await this.updateSystemBackupConfigRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update system packages.
   */
  async updateSystemPackagesRaw(): Promise<runtime.ApiResponse<string>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const response = await this.request({
      path: `/system/update-packages`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update system packages.
   */
  async updateSystemPackages(): Promise<string> {
    const response = await this.updateSystemPackagesRaw();
    return await response.value();
  }

  /**
   * Update new-version check status.  Request:    - `value: private`: Disable new version checks   - `value: off`: Enable new version checks
   */
  async updateSystemPrivacyRaw(
    requestParameters: UpdateSystemPrivacyRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.value === null ||
      requestParameters.value === undefined
    ) {
      throw new runtime.RequiredError(
        'value',
        'Required parameter requestParameters.value was null or undefined when calling updateSystemPrivacy.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters['Authorization'] =
        'Basic ' +
        btoa(this.configuration.username + ':' + this.configuration.password);
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.value !== undefined) {
      formParams.append('value', requestParameters.value as any);
    }

    const response = await this.request({
      path: `/system/privacy`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: formParams,
    });

    const contentType = response.headers.get('content-type');
    const isJson = contentType && contentType.includes('application/json');
    return new runtime[isJson ? 'JSONApiResponse' : 'TextApiResponse'](
      response
    ) as any;
  }

  /**
   * Update new-version check status.  Request:    - `value: private`: Disable new version checks   - `value: off`: Enable new version checks
   */
  async updateSystemPrivacy(
    requestParameters: UpdateSystemPrivacyRequest
  ): Promise<string> {
    const response = await this.updateSystemPrivacyRaw(requestParameters);
    return await response.value();
  }
}
