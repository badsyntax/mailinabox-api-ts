/* tslint:disable */
/* eslint-disable */
/**
 * Mail-in-a-Box
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present.
 *
 * The version of the OpenAPI document: 0.51.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Mail alias upsert request.
 * @export
 * @interface MailAliasUpsertRequest
 */
export interface MailAliasUpsertRequest {
  /**
   * Set to `1` when updating an alias.
   * @type {number}
   * @memberof MailAliasUpsertRequest
   */
  updateIfExists: number;
  /**
   * Email format.
   * @type {string}
   * @memberof MailAliasUpsertRequest
   */
  address: string;
  /**
   * If adding a regular or catch-all alias, the format needs to be `user@example.com`.
   * Multiple address can be separated by newlines or commas.
   *
   * If adding a domain alias, the format needs to be `@example.com`.
   * @type {string}
   * @memberof MailAliasUpsertRequest
   */
  forwardsTo: string;
  /**
   * Mail users that can send mail claiming to be from any address on the alias domain.
   * Multiple address can be separated by newlines or commas.
   *
   * Leave empty to allow any mail user listed in `forwards_to` to send mail claiming to be from any address on the alias domain.
   * @type {string}
   * @memberof MailAliasUpsertRequest
   */
  permittedSenders: string | null;
}

export function MailAliasUpsertRequestFromJSON(
  json: any
): MailAliasUpsertRequest {
  return MailAliasUpsertRequestFromJSONTyped(json, false);
}

export function MailAliasUpsertRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MailAliasUpsertRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    updateIfExists: json['update_if_exists'],
    address: json['address'],
    forwardsTo: json['forwards_to'],
    permittedSenders: json['permitted_senders'],
  };
}

export function MailAliasUpsertRequestToJSON(
  value?: MailAliasUpsertRequest | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    update_if_exists: value.updateIfExists,
    address: value.address,
    forwards_to: value.forwardsTo,
    permitted_senders: value.permittedSenders,
  };
}
